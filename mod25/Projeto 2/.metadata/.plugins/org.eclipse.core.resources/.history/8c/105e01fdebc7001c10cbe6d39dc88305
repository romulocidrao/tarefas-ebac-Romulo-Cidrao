/**
 * 
 */
package br.com.rcidrao.dao.generics;

import br.com.rcidrao.reflections.anotacao.cadastro.SingletonMap;
import br.com.rcidrao.reflections.anotacao.cadastro.anotacao.TipoChave;
import br.com.rcidrao.reflections.anotacao.cadastro.dao.generic.IGenericDAO;
import br.com.rcidrao.reflections.anotacao.cadastro.domain.Persistente;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Rômulo
 *
 */
public abstract class GenericDAO<T extends Persistente> implements IGenericDAO<T>{

//  protected Map<Class, Map<Long, T>> map;

  private SingletonMap singletonMap;

  public abstract Class<T> getTipoClasse();

  public abstract void atualizarDados(T entity, T entityCadastrado);

  public GenericDAO() { this.singletonMap = SingletonMap.getInstance(); }

  public Long getChave(T entity) {
      Field[] fields = entity.getClass().getDeclaredFields();
      for (Field field : fields) {
          if (field.isAnnotationPresent(TipoChave.class)) {
              TipoChave tipoChave = field.getAnnotation(TipoChave.class);
              String nomeMetodo = tipoChave.value();
              try {
                  Method method = entity.getClass().getMethod(nomeMetodo);
                  Long value = (Long) method.invoke(entity);
                  return value;
              } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                  e.printStackTrace();
              }

          }

      }
      return null;
  }



  @Override
  public Boolean cadastrar(T entity) {
      Map<Long, T> mapaInterno = (Map<Long, T>)  this.singletonMap.getMap().get(getTipoClasse());
      Long chave = getChave(entity);
      if(mapaInterno.containsKey(chave)) {
      return false;
      }

      mapaInterno.put(chave, entity);
      return true;
  }

  @Override
  public void excluir(Long valor) {
      Map<Long, T> mapaInterno = (Map<Long, T>)  this.singletonMap.getMap().get(getTipoClasse());
      T objetoCadastrado = mapaInterno.get(valor);

      if (objetoCadastrado != null) {
          mapaInterno.remove(valor, objetoCadastrado);
      }
  }

  @Override
  public void alterar(T entity) {
      Map<Long, T> mapaInterno = (Map<Long, T>)  this.singletonMap.getMap().get(getTipoClasse());
      Long chave = getChave(entity);
      T objetoCadastrado = mapaInterno.get(chave);

      if (objetoCadastrado != null) {
          atualizarDados(entity, objetoCadastrado);
      }

  }

  @Override
  public T consultar(Long valor) {
      Map<Long, T> mapaInterno = (Map<Long, T>)  this.singletonMap.getMap().get(getTipoClasse());
          return mapaInterno.get(valor);

  }

  @Override
  public Collection<T> buscarTodos() {
      Map<Long, T> mapaInterno = (Map<Long, T>)  this.singletonMap.getMap().get(getTipoClasse());
      return mapaInterno.values();
  }
}